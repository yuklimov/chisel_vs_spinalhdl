// Generated by CIRCT firtool-1.62.1
module WrCntr(
  input         clock,
                reset,
  input  [15:0] i_port_vdata_data,
  input         i_port_vdata_valid,
  output        i_port_ready,
  output [4:0]  o_mem_addr,
  output [15:0] o_mem_data,
  output        o_mem_en,
  input  [5:0]  i_addr,
  output [5:0]  o_addr
);

  reg  [5:0] addr;
  wire       i_port_ready_0 = addr != i_addr - 6'h20;
  wire       _o_mem_en_output = i_port_ready_0 & i_port_vdata_valid;
  always @(posedge clock) begin
    if (reset)
      addr <= 6'h0;
    else if (_o_mem_en_output)
      addr <= addr + 6'h1;
  end // always @(posedge)
  assign i_port_ready = i_port_ready_0;
  assign o_mem_addr = addr[4:0];
  assign o_mem_data = i_port_vdata_data;
  assign o_mem_en = _o_mem_en_output;
  assign o_addr = addr;
endmodule

module RdCntr(
  input         clock,
                reset,
  output [15:0] o_port_vdata_data,
  output        o_port_vdata_valid,
  input         o_port_ready,
  output [4:0]  o_mem_addr,
  input  [15:0] o_mem_data,
  output        o_mem_en,
  input  [5:0]  i_addr,
  output [5:0]  o_addr
);

  reg  [5:0]  addr;
  reg         buf0_valid_REG;
  reg  [15:0] buf1_data;
  reg         buf1_valid;
  reg  [15:0] buf2_data;
  reg         buf2_valid;
  wire        o_mem_en_0 =
    addr != i_addr
    & (o_port_ready | ~(buf0_valid_REG | buf1_valid | buf2_valid) | buf0_valid_REG
       & ~(buf0_valid_REG & buf1_valid));
  always @(posedge clock) begin
    automatic logic _GEN;
    _GEN = buf0_valid_REG | ~buf2_valid;
    if (reset) begin
      addr <= 6'h0;
      buf0_valid_REG <= 1'h0;
      buf1_valid <= 1'h0;
      buf2_valid <= 1'h0;
    end
    else begin
      if (o_mem_en_0)
        addr <= addr + 6'h1;
      buf0_valid_REG <= o_mem_en_0;
      if (_GEN)
        buf1_valid <= buf0_valid_REG;
      buf2_valid <= ~o_port_ready & (buf2_valid ? buf2_valid : buf1_valid);
    end
    if (_GEN)
      buf1_data <= o_mem_data;
    if (o_port_ready | buf2_valid) begin
    end
    else
      buf2_data <= buf1_data;
  end // always @(posedge)
  assign o_port_vdata_data = buf2_valid ? buf2_data : buf1_data;
  assign o_port_vdata_valid = buf2_valid ? buf2_valid : buf1_valid;
  assign o_mem_addr = addr[4:0];
  assign o_mem_en = o_mem_en_0;
  assign o_addr = addr;
endmodule

// VCS coverage exclude_file
module mem_32x16(
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [15:0] R0_data,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [15:0] W0_data
);

  reg [15:0] Memory[0:31];
  reg        _R0_en_d0;
  reg [4:0]  _R0_addr_d0;
  always @(posedge R0_clk) begin
    _R0_en_d0 <= R0_en;
    _R0_addr_d0 <= R0_addr;
  end // always @(posedge)
  always @(posedge W0_clk) begin
    if (W0_en & 1'h1)
      Memory[W0_addr] <= W0_data;
  end // always @(posedge)
  assign R0_data = _R0_en_d0 ? Memory[_R0_addr_d0] : 16'bx;
endmodule

module FIFO(
  input         clock,
                reset,
  input  [15:0] i_port_vdata_data,
  input         i_port_vdata_valid,
  output        i_port_ready,
  output [15:0] o_port_vdata_data,
  output        o_port_vdata_valid,
  input         o_port_ready
);

  wire [15:0] _mem_ext_R0_data;
  wire [4:0]  _rctrl_o_mem_addr;
  wire        _rctrl_o_mem_en;
  wire [5:0]  _rctrl_o_addr;
  wire [4:0]  _wctrl_o_mem_addr;
  wire [15:0] _wctrl_o_mem_data;
  wire        _wctrl_o_mem_en;
  wire [5:0]  _wctrl_o_addr;
  WrCntr wctrl (
    .clock              (clock),
    .reset              (reset),
    .i_port_vdata_data  (i_port_vdata_data),
    .i_port_vdata_valid (i_port_vdata_valid),
    .i_port_ready       (i_port_ready),
    .o_mem_addr         (_wctrl_o_mem_addr),
    .o_mem_data         (_wctrl_o_mem_data),
    .o_mem_en           (_wctrl_o_mem_en),
    .i_addr             (_rctrl_o_addr),
    .o_addr             (_wctrl_o_addr)
  );
  RdCntr rctrl (
    .clock              (clock),
    .reset              (reset),
    .o_port_vdata_data  (o_port_vdata_data),
    .o_port_vdata_valid (o_port_vdata_valid),
    .o_port_ready       (o_port_ready),
    .o_mem_addr         (_rctrl_o_mem_addr),
    .o_mem_data         (_mem_ext_R0_data),
    .o_mem_en           (_rctrl_o_mem_en),
    .i_addr             (_wctrl_o_addr),
    .o_addr             (_rctrl_o_addr)
  );
  mem_32x16 mem_ext (
    .R0_addr (_rctrl_o_mem_addr),
    .R0_en   (_rctrl_o_mem_en),
    .R0_clk  (clock),
    .R0_data (_mem_ext_R0_data),
    .W0_addr (_wctrl_o_mem_addr),
    .W0_en   (_wctrl_o_mem_en),
    .W0_clk  (clock),
    .W0_data (_wctrl_o_mem_data)
  );
endmodule

